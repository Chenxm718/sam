package com.sam.test;

import com.alibaba.fastjson.JSON;
import com.sam.restful.bean.FaceRectangle;
import com.sam.restful.bean.Faces;
import com.sam.restful.bean.PhotoBean;
import com.sam.restful.utils.FileTxtUtils;
import com.sam.restful.utils.HttpUtils;
import com.sam.restful.utils.Img2Base64Util;
import org.junit.Test;

import java.io.*;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.*;

public class TestHttp {

    String api_key = "zK8JxefKQDja7g6waFerm7sfQnRQKG74";
    String api_secret ="rOhSYKqJAVEXv2Xcu2DQqcUmc0uxdide";
    String image_base64 = "";




    @Test
    public void testDetect(){
      String b =  image_base64="";
        String dbUrl = "https://api-cn.faceplusplus.com/facepp/v3/detect";
        int return_landmark = 2;
        String return_attributes = "gender,age,eyestatus,eyegaze,ethnicity,smiling,facequality,blur,beauty";
        Map params = new HashMap();
        params.put("api_key",api_key);
        params.put("api_secret",api_secret);
//        params.put("image_base64",Img2Base64Util.getImgStr(new File("D:\\Myself\\180403071618570623.jpg")));
//        params.put("image_base64",Img2Base64Util.getImgStr(new File("D:\\Myself\\180403071618710377.jpg")));
//        params.put("image_base64",Img2Base64Util.getImgStr(new File("D:\\Myself\\180403071619285986.jpg")));
//        params.put("image_base64",Img2Base64Util.getImgStr(new File("D:\\Myself\\180403071619487349.jpg")));
//        params.put("image_base64",
//                Img2Base64Util.getImgStr(new File("D:\\Myself\\sam.jpg")));
//        params.put("image_base64",image_base64);
        params.put("image_base64",
                Img2Base64Util.byte2Base64(Img2Base64Util.file2byte("D:\\Myself\\18041216451299266.jpg")));
//        params.put("image_base64",b);
        params.put("return_landmark",return_landmark);
//        params.put("image_base64",Img2Base64Util.getImgStr(new File("D:\\Myself\\sam.jpg")));
        params.put("return_attributes",return_attributes);
        String dbDetail = HttpUtils.getHttpUitlsClient().sendHttpRequest(dbUrl,params,"POST");
        PhotoBean fotoBean = JSON.parseObject(dbDetail, PhotoBean.class);
        if (null!=fotoBean){
           List<Faces> facesList = fotoBean.getFaces();
           if (!facesList.isEmpty()){
               facesList.forEach(faces -> {
                  FaceRectangle faceRectangle = faces.getFace_rectangle();
                   System.out.println(faceRectangle.getHeight()+"==="+faceRectangle.getWidth());
               });
           }
        }
        System.out.println(dbDetail);
    }



    @Test
    public void testSearch(){
        String dbUrl = "https://api-cn.faceplusplus.com/facepp/v3/search";
        String template_rectangle = "141,75,199,199";
        Map params = new HashMap();
        params.put("api_key",api_key);
        params.put("api_secret",api_secret);
        params.put("image_base64",image_base64);
        params.put("outer_id","sam_test");
        params.put("template_rectangle",template_rectangle);
        String dbDetail = HttpUtils.getHttpUitlsClient().sendHttpRequest(dbUrl,params,"POST");
        System.out.println(dbDetail);
    }


    @Test
    public void testCreate(){
        String dbUrl = "https://api-cn.faceplusplus.com/facepp/v3/faceset/create";
        Map params = new HashMap();
        params.put("api_key",api_key);
        params.put("api_secret",api_secret);
        params.put("outer_id","sam_test");
        params.put("display_name","sam_test");
        String dbDetail = HttpUtils.getHttpUitlsClient().sendHttpRequest(dbUrl,params,"POST");
        System.out.println(dbDetail);
    }

    @Test
    public void testAdd(){
        String dbUrl = "https://api-cn.faceplusplus.com/facepp/v3/faceset/addface";
        Map params = new HashMap();
        params.put("api_key",api_key);
        params.put("api_secret",api_secret);
        params.put("outer_id","sam_test");
        params.put("face_tokens","b72de1fae3eccd2a17a8c6d8242fe55c");
        String dbDetail = HttpUtils.getHttpUitlsClient().sendHttpRequest(dbUrl,params,"POST");
        System.out.println(dbDetail);
    }


    @Test
    public void testMerge(){
        String dbUrl = "https://api-cn.faceplusplus.com/imagepp/v1/mergeface";
        String template_rectangle = "141,75,199,199";
        Map params = new HashMap();
        params.put("api_key",api_key);
        params.put("api_secret",api_secret);
        params.put("template_url","D:\\Myself\\temp.jpg");
        params.put("template_rectangle",template_rectangle);
        params.put("image_base64",image_base64);
        params.put("outer_id","sam_test");
        params.put("template_rectangle",template_rectangle);

        String dbDetail = HttpUtils.getHttpUitlsClient().sendHttpRequest(dbUrl,params,"POST");
        System.out.println(dbDetail);
    }

    @Test
    public void testB64(){
        System.out.println(Img2Base64Util.getImgStr(new File("D:\\Myself\\sam.jpg")));
    }

    @Test
    public void testByte2Base64(){
        System.out.println(Img2Base64Util.byte2Base64(Img2Base64Util.file2byte("D:\\Myself\\sam.jpg")));
    }

    @Test
    public void testRemove(){
//        FaceRectangle f1 = new FaceRectangle();
//        f1.setTop(1);
//        FaceRectangle f2 = new FaceRectangle();
//        f1.setTop(2);
//        FaceRectangle f3 = new FaceRectangle();
//        f1.setTop(3);
//        List<FaceRectangle> r = new ArrayList<>();
//        r.add(f1);
//        r.add(f2);
//        r.add(f3);
//
//        r.forEach(f -> {
//            if (2 != f.getTop()){
//                r.remove(f);
//            }
//        });
//        System.out.println(r.size());
        List<List<String>> c = new ArrayList<>();
        List<String> s = new ArrayList<>();
        s.add("1,2");
        c.add(s);
        c.forEach(o ->{
            if (o.get(0)!=null
                    &&o.get(0).contains(",")){
                String[] str = o.get(0).split(",");
                o.clear();
                o.addAll(Arrays.asList(str))  ;
            }
        });
        c.forEach(o ->{
            System.out.println(o.size());
            System.out.printf("");
        });

    }


    @Test
    public void testDetectData(){

        String dbUrl = "https://api-cn.faceplusplus.com/facepp/v3/detect";
        int return_landmark = 2;
        String return_attributes = "gender,age,eyestatus,eyegaze,ethnicity,smiling,facequality,blur,beauty";
        File file = new File("D:\\Myself\\other");
//        File file = new File("D:\\Myself\\e");
        if (file.isDirectory()){
            File[] f =  file.listFiles();
            for (int i = 0;i<f.length;i++){
                Map params = new HashMap();
                params.put("api_key",api_key);
                params.put("api_secret",api_secret);

                params.put("image_base64",
                        Img2Base64Util.byte2Base64(Img2Base64Util.file2byte(f[i].getPath())));
                params.put("return_landmark",return_landmark);
                params.put("return_attributes",return_attributes);
                String dbDetail = HttpUtils.getHttpUitlsClient().sendHttpRequest(dbUrl,params,"POST");
                String rpath = f[i].getParent();
                String fileName = f[i].getName();
                String txtPath = fileName.replace("jpg","txt");
//                System.out.println(rpath+fileName);
//                System.out.println(dbDetail);
                try {
                    PhotoBean fotoBean = JSON.parseObject(dbDetail, PhotoBean.class);
                    if (null!=fotoBean){
                        List<Faces> facesList = fotoBean.getFaces();
                        wf(facesList,txtPath);
                    }
                }catch (Exception e){
                    System.out.println(rpath+fileName);
                }

            }

        }


    }

    private void wf(List<Faces> facesList,String txtPath) {
        if (!facesList.isEmpty()){

            facesList.forEach(faces -> {
                String wpath="";
                FaceRectangle faceRectangle = faces.getFace_rectangle();
                if (facesList.size()>1){
                    wpath = "D:\\Myself\\2";
                }else{
                    if ("Female".equals(faces.getAttributes().getGender().getValue())){
                        wpath = "D:\\Myself\\nv";
                    }else if("Male".equals(faces.getAttributes().getGender().getValue())){
                        wpath = "D:\\Myself\\nan";
                    }else{
                        wpath = "D:\\Myself\\other";
                    }
                }
                String file = wpath+"\\"+txtPath;
                FileTxtUtils.creatTxtFile(file);
                System.out.println(file+"============");
//                    System.out.println("年龄..."+faces.getAttributes().getAge().getValue());
                FileTxtUtils.writeTxtFile("年龄..."+faces.getAttributes().getAge().getValue(),file);
//                    System.out.println("性别..."+faces.getAttributes().getGender().getValue());
                FileTxtUtils.writeTxtFile("性别..."+faces.getAttributes().getGender().getValue(),file);
//                    System.out.println("人种..."+faces.getAttributes().getEthnicity().getValue());
                FileTxtUtils.writeTxtFile("人种..."+faces.getAttributes().getEthnicity().getValue(),file);
//                    System.out.println("x坐标"+faceRectangle.getLeft()+"y坐标"+faceRectangle.getTop()+" 宽"+faceRectangle.getWidth()+"高"+faceRectangle.getHeight());
                FileTxtUtils.writeTxtFile("x坐标"+faceRectangle.getLeft()+"y坐标"+faceRectangle.getTop()+" 宽"+faceRectangle.getWidth()+"高"+faceRectangle.getHeight(),file);
//                    System.out.println("精确度..."+faces.getAttributes().getFacequality().getValue());
                FileTxtUtils.writeTxtFile("精确度..."+faces.getAttributes().getFacequality().getValue(),file);
            });

        }else {
            String wpath = "D:\\Myself\\other\\"+txtPath;
            System.out.println(wpath+"============");

        }
    }

    @Test
    public void testFile(){
        File file = new File("D:\\Myself\\1");
        if (file.isDirectory()){
            File[] f =  file.listFiles();
            for (int i = 0;i<f.length;i++){
                System.out.println(f[i].getPath());
                System.out.println(f[i].getPath().replace("jpg","txt"));
            }
        }
    }

    @Test
    public void testTime(){
//        String endTime = "2018-04-24";
//        String passTime =  LocalDate.parse(endTime).atStartOfDay().toString();
//        System.out.println(passTime);
//        String startDateTime = LocalDate.now().minusDays(1L).atStartOfDay().toString();
//        String endDateTime = LocalDate.now().atStartOfDay().minusNanos(1).toString();
//        System.out.println(startDateTime);
//        System.out.println(endDateTime);
        String s = "d//0";
        System.out.println(s.substring(0,s.lastIndexOf("//")));
    }

    @Test
    public void testJson(){
        FinishedData finishedData  = new FinishedData();
        finishedData.setCreateTime(LocalDateTime.now());
        finishedData.setFinishedDate(LocalDate.now());
        finishedData.setId(123);
        finishedData.setMemberNo("123123");
        finishedData.setRuleId(123);
        List<FinishedData> dataList = new ArrayList<>();
        dataList.add(finishedData);
        String d = JSON.toJSONString(dataList);
        List<FinishedData> list = JSON.parseArray(d,FinishedData.class);
        list.forEach(finishedData1 -> {
            System.out.println(finishedData1.getRuleId());
        });
    }


    @Test
    public void testSort(){
        FinishedData finishedData  = new FinishedData();
        finishedData.setCreateTime(LocalDateTime.now());
        finishedData.setFinishedDate(LocalDate.now());
        finishedData.setId(123);
        finishedData.setMemberNo("123123");
        finishedData.setRuleId(123);
        finishedData.setDataId(1233);
        FinishedData finishedData1  = new FinishedData();
        finishedData1.setCreateTime(LocalDateTime.now().minusDays(1));
        finishedData1.setFinishedDate(LocalDate.now().minusDays(1));
        finishedData1.setId(1234);
        finishedData1.setMemberNo("1231234");
        finishedData1.setRuleId(1234);
        finishedData1.setDataId(1234);
        List<FinishedData> dataList = new ArrayList<>();
        dataList.add(finishedData);
        dataList.add(finishedData1);

//        Collections.sort(dataList, Comparator.comparing(FinishedData::getFinishedDate));
        Collections.sort(dataList,(d1,d2)-> d2.getFinishedDate().compareTo(d1.getFinishedDate()));
//        Collections.sort(dataList,(d1,d2)-> d2.getDataId()-d1.getDataId());
        dataList.forEach(data->{
            System.out.println(data.getDataId());
        });
    }

    @Test
    public void testList(){
        FinishedData finishedData  = new FinishedData();
        finishedData.setCreateTime(LocalDateTime.now());
        finishedData.setFinishedDate(LocalDate.now());
        finishedData.setId(123);
        finishedData.setMemberNo("123123");
        finishedData.setRuleId(123);
        finishedData.setDataId(1233);
        List<String> list1 = new ArrayList<>();
        list1.add("1");
        finishedData.setList(list1);
        FinishedData finishedData1  = new FinishedData();
        finishedData1.setCreateTime(LocalDateTime.now().minusDays(1));
        finishedData1.setFinishedDate(LocalDate.now().minusDays(1));
        finishedData1.setId(1234);
        finishedData1.setMemberNo("1231234");
        finishedData1.setRuleId(1234);
        finishedData1.setDataId(1234);
        List<String> list2 = new ArrayList<>();
        list2.add("2");
        finishedData.setList(list2);
        List<FinishedData> dataList = new ArrayList<>();
        dataList.add(finishedData);
        dataList.add(finishedData1);

//        Collections.sort(dataList, Comparator.comparing(FinishedData::getFinishedDate));
//        Collections.sort(dataList,(d1,d2)-> d2.getFinishedDate().compareTo(d1.getFinishedDate()));
        Collections.sort(dataList, Comparator.comparingInt(FinishedData::getDataId));
//        dataList.forEach(data->{
//            List<String> list3 = new ArrayList<>();
//            list3.add("3");
//            data.setList(list3);
//            System.out.println(data.getDataId());
//        });

        dataList.forEach(d->{
            System.out.println(d.getDataId());
        });
    }

    @Test
    public void testMap(){
        FinishedData finishedData  = new FinishedData();
        finishedData.setCreateTime(LocalDateTime.now());
        finishedData.setFinishedDate(LocalDate.now());
        finishedData.setId(123);
        finishedData.setMemberNo("123123");
        finishedData.setRuleId(123);
        finishedData.setDataId(1233);
        FinishedData finishedData1  = new FinishedData();
        finishedData1.setCreateTime(LocalDateTime.now().minusDays(1));
        finishedData1.setFinishedDate(LocalDate.now().minusDays(1));
        finishedData1.setId(1234);
        finishedData1.setMemberNo("1231234");
        finishedData1.setRuleId(1234);
        finishedData1.setDataId(1234);
        List<FinishedData> dataList = new ArrayList<>();
        dataList.add(finishedData);
        dataList.add(finishedData1);
        Map<Integer,List<FinishedData>> dataMap = new HashMap<>();
        dataMap.put(1,dataList);

        if (dataMap.get(1)!=null){
            FinishedData finishedData3  = new FinishedData();
            finishedData3.setCreateTime(LocalDateTime.now());
            finishedData3.setFinishedDate(LocalDate.now());
            finishedData3.setId(123);
            finishedData3.setMemberNo("123123");
            finishedData3.setRuleId(123);
            finishedData3.setDataId(1233);
            dataMap.get(1).add(finishedData3);
        }
        System.out.println(dataMap.get(1).size());
    }

}
